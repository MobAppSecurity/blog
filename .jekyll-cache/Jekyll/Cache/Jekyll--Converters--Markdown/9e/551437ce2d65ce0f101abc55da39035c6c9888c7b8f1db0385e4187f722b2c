I"◊<p>Hello world!</p>

<p>Last time, we do little bit of experiment on how powerful frida could be used to aid our android pentesting analysis(<a href="https://mobappsecurity.github.io/blog/android_application_security/2021/03/25/android_application_security_chapter_0x1.html">post</a>), however, it left us with a big question ‚Äúwhether we can use frida to tamper native library in Android or not ?‚Äù</p>

<p>Well! the answer is ‚ÄúYES! absolutely‚Äù</p>

<p>Thus, in this post I would like to continue this saga by trying to solve OWASP-MSTG challenge level 1 - level 3 using frida(<a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/Android">link</a>) and by going through this challenge, you will have good general idea how to used frida to analyse native library in Android.</p>

<p>Don‚Äôt worry the last two level will be cover in the next post because I don‚Äôt want to overwhelm and make you guys bored.</p>

<h2> What is Android Native Library? Why you should care about it? </h2>

<p>As you know, you can create Android Application by Java or Kotlin programming language, this language give you a good features to interact with underlying Android API to do a lot of cool stuff in you app. But there are certain cases, when you want to incoperate your app with lower level programming like C or C++ such as cryptography, openGL or any task that required intense memory management, this is where Android Native Library comes in.</p>

<p>A lot of people, thinks that this is a good place to stored a secret inside the application since you have to deal with assemblies and memory, but throughout of the post you will found out that given enough time and motivation hackers always find a way.</p>

<p>Android native library shipped along with the .apk file and stored in ‚Äú/lib/‚Äù library if you try to decompile it with apktool and the file name usually have extension .so. Usually to make the native library can be implemented in a lot devices, developer tend to create several architecture version of the library such as x86, x86_64, armv7 and armv8.</p>

<h2> Enough Talk Let's Go to Level 1 </h2>

<p>Generally all the challenges ask you to get the secret string or password inside the app but as the level increase it‚Äôs going to be more difficult to get the password since there are a lot of protection in the app.</p>

<p>There are two things that we need to do accomplished the first level:</p>

<ul>
  <li>
    <p>Bypass the root detection;</p>
  </li>
  <li>
    <p>Intercept the Decryption process to get the password.</p>
  </li>
</ul>

<h3> 1. Bypass the root detection </h3>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/frida2/frida1.png" alt="PLIST-FILE_3" /></p>

<p>The following piece of code is the one that responsible to check if the app is installed in rooted device or not. You will find it in sg.vantagepoint.uncrackable1.MainActivity class in onCreate() method and as you can see it call another class named ‚Äúc‚Äù located in sg.vantagepoint.a.c and used its function named ‚Äúa‚Äù, ‚Äúb‚Äù and ‚Äúc‚Äù.</p>

<p>If you try to trace the root checking method, you will end up in this piece of source code:</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/frida2/frida2.png" alt="PLIST-FILE_3" /></p>

<p>Each of this function return a boolean data type(true/false) if one of this check is true it will tell the application to exit. Thus, we will create a frida script that will intercept all of this function to always return false.</p>

:ET