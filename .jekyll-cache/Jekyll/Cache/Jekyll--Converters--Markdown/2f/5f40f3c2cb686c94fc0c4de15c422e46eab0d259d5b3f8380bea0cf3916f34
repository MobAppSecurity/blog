I"≠<p>Hello world!</p>

<p>Last time, we do little bit of experiment on how powerful frida could be used to aid our android pentesting analysis(<a href="https://mobappsecurity.github.io/blog/android_application_security/2021/03/25/android_application_security_chapter_0x1.html">post</a>), however, it left us with a big question ‚Äúwhether we can use frida to tamper native library in Android or not ?‚Äù</p>

<p>Well! the answer is ‚ÄúYES! absolutely‚Äù</p>

<p>Thus, in this post I would like to continue this saga by trying to solve OWASP-MSTG challenge level 1 - level 3 using frida(<a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/Android">link</a>) and by going through this challenge, you will have good general idea how to used frida to analyse native library in Android.</p>

<p>Don‚Äôt worry the last two level will be cover in the next post because I don‚Äôt want to overwhelm and make you guys bored.</p>

<h2> What is Android Native Library? Why you should care about it? </h2>

<p>As you know, you can create Android Application by Java or Kotlin programming language, this language give you a good features to interact with underlying Android API to do a lot of cool stuff in you app. But there are certain cases, when you want to incoperate your app with lower level programming like C or C++ such as cryptography, openGL or any task that required intense memory management, this is where Android Native Library comes in. A lot of people, thinks that this is a good place to stored a secret inside the application, but throughout of the post you will found that this</p>

<p>Android native library shipped along with the .apk file and stored in ‚Äú/lib/‚Äù library if you try to decompile it with apktool and the file name usually have extension .so. Usually to make the native library can be implemented in a lot devices, developer tend to create several architecture version of the library such as x86, x86_64, armv7 and armv8.</p>

:ET