I"<p>Hello world!</p>

<p>Before we getting start with the content, I would like to mentioned that this material is not meant for beginner. If you never done Windows Exploit Development before I suggest to start reading my old blog about breaking the code series(<a href="https://court-of-testing-analysing.blogspot.com/2019/11/breaking-code-exploit-development.html">link</a>) this will give a general idea on how to setup and conduct research on windows binary.</p>

<p>This post was heavily inspired from the following <a href="https://www.exploit-db.com/exploits/46625">exploit-db</a>. You may notice later there are some differences on my exploit script but the concept is still the same with the original author.</p>

<p>Enjoy!</p>

<h2> Setup Windows Lab </h2>

<p>In this lab I used Windows 7 from windows IE developer official(<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">website</a>) and install several tools for exploit development in it, such as:</p>

<ul>
  <li>
    <p>Python 2.7</p>
  </li>
  <li>
    <p>Immunity Debugger</p>
  </li>
  <li>
    <p>Mona</p>
  </li>
  <li>
    <p>The vulnerable program, you can download it from the following <a href="https://www.exploit-db.com/exploits/46625">link</a></p>
  </li>
</ul>

<p>Note 1: In this exploit, DEP is set to on, however I choose the option where it only affect some critical components in windows not our target program!</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_2/windows1.png" alt="PLIST-FILE_3" height="500px" width="450px" /></p>

<h2> Crash and Take Over the Program EIP </h2>

<p>Lets crash the program by supplying it with a massive amount of characters, we are just going straight used mona in immunity debugger to create a pattern to identify at what offset did the EIP is overwrite in our input.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">!</span>mona pattern_create 700</code></pre></figure>

<figure class="highlight"><pre><code class="language-py" data-lang="py"><span class="n">padding</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">pattern</span> <span class="n">payload</span><span class="o">&gt;</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"payload.txt"</span><span class="p">,</span><span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
  <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
  <span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">print</span> <span class="s">"[!] payload.txt ready to uploaded"</span></code></pre></figure>

<p>Start the program, it should be look like this and we are going to copy-paste the payload from payload.txt to the “save to file” form and click “decode”. Don’t forget to attach it with immunity debugger.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_2/windows2.png" alt="PLIST-FILE_3" height="500px" width="450px" /></p>

<p>The program is crash but we don’t see EIP is overwritten with our input, hmmmmm whats going on? is it because the payload is not long enough or is there any error that cause this situation.</p>

<p>The answer is because of the SEH features in the program. Basically SEH is like a try exception mechanism inside a program to handle error, if you are a programmer you already might know about this concept.</p>

<p>So how do we proceed ? what should we do about it? simple! we shift our focus on taking control on SEH. The rule is that if a program encounter error it execution will be control by SEH so our priority now is to find the offset to overwrite SEH.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_2/windows3.png" alt="PLIST-FILE_3" height="500px" width="450px" /></p>

:ET