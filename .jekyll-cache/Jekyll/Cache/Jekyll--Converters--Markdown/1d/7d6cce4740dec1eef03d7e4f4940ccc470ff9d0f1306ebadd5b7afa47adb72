I"è<p>Hello world!</p>

<p>Before we getting start with the content, I would like to mentioned that this material is not meant for beginner. If you never done Windows Exploit Development before I suggest to start reading my old blog about breaking the code series(<a href="https://court-of-testing-analysing.blogspot.com/2019/11/breaking-code-exploit-development.html">link</a>) this will give a general idea on how to setup and conduct research on windows binary.</p>

<p>This post was inspired from the following <a href="https://www.exploit-db.com/exploits/46283">exploit-db</a>. You may notice later that I used different exploit to gain control of the program but the approach still the same with the original author.</p>

<h2> Setup Windows Lab </h2>

<p>In this lab I used Windows 7 from windows IE developer official (<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">website</a>) and install several tools for exploit development in it, such as:</p>

<ul>
  <li>
    <p>Python 2.7</p>
  </li>
  <li>
    <p>Immunity Debugger</p>
  </li>
  <li>
    <p>Mona</p>
  </li>
  <li>
    <p>The vulnerable program, you can download it from the following <a href="https://www.exploit-db.com/exploits/46283">link</a></p>
  </li>
</ul>

<p>Note 1: DEP is set to always ON!</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp1.png" alt="PLIST-FILE_3" /></p>

<p>DEP is stands for Data Execution Prevention. This security mechanism is used to make the stack area of program to be not executable, thus, this means if we try to put shellcode in the stack it will failed. To bypass this protection, we will use ROP(Return Oriented Programming) to reuse the code inside the program to call virtualprotect function in order to make the stack area executable again.</p>

<p>Note 2: Exploit offset calculation is based on the how long is the username of the windows machine, in this case my username is IEUser.</p>

<p>Note 3: To get accurate result when debugging the exploit, everytime the program crash you need to detach the immunity debugger, restart the program and attach it again. I know it‚Äôs a lot of work.</p>

<h2> Crash and Take Over the Program EIP </h2>

<p>First, we need to crash the program and take over the EIP register. This register is the one responsible to control the execution flow.</p>

<figure class="highlight"><pre><code class="language-py" data-lang="py"><span class="n">padding</span> <span class="o">=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="mi">2000</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"payload.txt"</span><span class="p">,</span><span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
	<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
	<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">print</span> <span class="s">"[!] payload.txt ready to uploaded"</span></code></pre></figure>

<p>The following python code will generate a payload.txt file that will crash the program by overwritting the EIP register. Upload the file by go to the ‚Äúcomputer‚Äù section and choose ‚ÄúFrom Text File‚Äù.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp2.png" alt="PLIST-FILE_3" /></p>

<p>Then go to the immunity debugger, you need to type ‚Äúshift+f9‚Äù to jump the SEH exception to get the following result. If you having trouble to used this shortcut you can go to virtualbox options ‚Äúinput‚Äù &gt; ‚Äúkeyboard‚Äù &gt; ‚ÄúSoft Keyboard‚Äù to emulate this shortcut.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp3.png" alt="PLIST-FILE_3" height="300px" width="300px" /></p>

<p>At this stage, we need to know at what offset in our input to gain control of the EIP register, we will be using one of the mona features to generate pattern for the payload.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp4.png" alt="PLIST-FILE_3" /></p>

<p>To get the pattern you can go to immunity folder and look for pattern.txt file. Copied the content under ASCII section and update the previous python source code to used this payload.</p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp5.png" alt="PLIST-FILE_3" /></p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp6.png" alt="PLIST-FILE_3" /></p>

<p>Upload the new payload to the vulnerable program and don‚Äôt forgot to pass the exception using ‚Äúshift+f9‚Äù shortcut. The EIP now is overwrite with the pattern, next we will use mona feature to get the exact location of our input to control the EIP.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">!</span>mona findmsp</code></pre></figure>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp7.png" alt="PLIST-FILE_3" /></p>

<p style="text-align: center;"><img src="http://localhost:4000/blog/img/windows_exploit_dev_1/windows_exp8.png" alt="PLIST-FILE_3" /></p>

:ET